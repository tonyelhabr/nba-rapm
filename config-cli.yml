default:

  # General parameters.
  debug:
    default: true
    help: 'If `TRUE`, exports data at developer pre-defined places
    (primarily in the cleaining and munging functions) with "hard-coded" file names.
    This really should only be set to `TRUE` during development.)'
  verbose:
    default: true
    help: 'If `TRUE`, INFO messages are dispayed.
    (Other message types (WARNING and ERROR) are always shown.)'
  export:
    default: true
    help: 'If `TRUE`, always exports data to appropriate files.'
  backup:
    default: true
    help: 'If `TRUE`, backup files are created (for all files exported).
    By default, a timestamp is appended to the name of the backup file 
    to distinguish it from the most recent version.'
  clean:
    default: true
    help: 'If `TRUE`, "cleans" (or "keeps") up backup files (so that an endless number of files are not
    created over time).
    Keeps the most recent backups by default.
    Note that `backup`, `clean`, and `n_keep` can/should be
    used synchronously as an alternative to a generic `overwrite` option.'
  n_keep:
    default: 1
    help: 'Number of backup files to NOT delete when "clean"-ing backup files.'
  dir:
    default: 'C:/Users/aelhabr/Documents/projects/nba-rapm/R'
    help: 'Working directory. MUST exist. (Note that the user most certainly will need
    to change the default value, which is primarily specified for the convenience of the developer.'
  multi_core:
    default: true
    help: 'Whether to use multiple user computer cores.'
  n_core:
    default: 4
    help: 'Number of cores to use. Only relevant if `multi_core = TRUE`.
    (Requires `{parallel}` package, as well as `{doParallel}` package on Windows.)'
  season:
    default: 2017
    help: 'NBA season to process. Used as "suffix" for all path formats 
    (where it is subsituted in placed for the "sprintf"-style format "%04d").'

  # Model-fitting parameters.
  season_type:
    default: 'regular'
    help: 'Valid choices include "regular". ("playoffs" and "all" have not been implemented).'
  poss_min:
    default: 200
    help: 'Minimum number of possession in which a player must have 
    participated  (offense and defense combined) in order to qualify for model fitting process.
    (Model quality generally improves if players with less time played are removed
    from consideration because they can represent outliers and have high leverage on 
    the model fitting.)'
  gp_min:
    default: 0
    help: 'Analogous to `poss_min` for games played.'
  mp_min:
    default: 0
    help: 'Analogous to `poss_min` for minutes played.'
  optimize_o:
    default: false
    help: 'If `TRUE`, then calculates the "optimal" regularized
    "lambda" penalties for the offensive at run-time (via `{glment}`"s default cross validation procedure.
    Note that setting this value to `FALSE` (and using the default `lambda_optm_o` value),
    reduces run-time execution.'
  optimize_d:
    default: false
    help: 'Analogous to `optimize_lambda_o`.'
  seed_o:
    default: 42
    help: 'Seed to use for ridge regression cross-validation.'
  seed_d:
    default: 42
    help: 'Analogous to `seed_o`.'
  lambda_o:
    default: 200
    help: 'Value to use for lambda in model fit if `optimize_lambda_o = FALSE`.'
  lambda_d:
    default: 200
    help: 'Analogous to `lambda_optm_o`.'
    
  # Data pre-processing (i.e. cleaning) parameters.
  skip_clean:
    default: false
    help: 'If `TRUE`, skips process of cleaning the raw data
    and goes immediately to "intermediate" data processing steps.
    In this case, intermediate data for given season MUST exist.'
  path_raw_play_by_play:
    default: 'data-raw/raw_play_by_play.csv'
    help: 'Path format of raw play-by-play data file to clean.)'
  path_raw_game_summary:
    default: 'data-raw/raw_game_summary.csv'
    help: 'Path format of raw game summary data file. Needed solely for identifying
    home and away teams, which is not defined in `play_by_play_raw` data from source.'
  path_play_by_play:
    default: 'data/play_by_play.csv'
    help: 'Path format of cleaned play-by-play data file to export.
    Only relevant if `export = TRUE` or if `import_munge = TRUE` (in which
    case, it is used as the "input" to the intermediate processing).'
  path_game_summary:
    default: 'data/game_summary.csv'
    help: 'Analogous to `path_play_by_play`. Note that, even though
    this comes from the "Ryan Davis" raw data source, it can/should be used
    for comparisons with other raw data sources.'
  
  skip_munge:
    default: false
    help: 'If `TRUE`, skips "munging" of cleaned data
    and goes immediately to "fit" (i.e. model fitting) steps.
    In this case "post"-munging data for given season MUST exist.
    (In all, its functionality is analogous to `import_clean`.)'
  path_possession_data_o:
    default: 'data/posession_data_o.rds'
    help: 'Path format of "wide" offensive possession data. 
    Only relevant if `export = TRUE` OR if `import_fit = TRUE` (in which
    case, it is used as the "input" to the model fitting step).'
  path_possession_data_d:
    default: 'data/posession_data_d.rds'
    help: 'Analogous to `path_possession_data_o`.'
  path_players:
    default: 'data/players.csv'
    help: 'Path format of cleaned player data to export.
    Only relevant if `export = TRUE`.
    Not a dependency for any other data processing. Simply useful for informative purposes.'
  path_teams:
    default: 'data/teams.csv'
    help: 'Analogous to `path_players` for cleaned team data to export.'
  path_players_summary:
    default: 'data/players_summary.csv'
    help: 'Path format of summarized cleaned player data to export.
     Relevant in the same cases as `path_possession_data_o`.
     Used to add names and other player-relevant information to final output.'
   
  skip_fit:
    default: false
    help: 'If `TRUE`, then skips model fitting steps.
    (There is probably no case in which the user would want to set this to `FALSE`, 
    but it can be useful to set this to `FALSE` for development/debugging purposes.)'
  path_rapm_fit_o:
    default: 'data/rapm_fit_o.rds'
    help: 'Path format of RAPM model fitted for offensive possession data.
    Only relevent if `export = `TRUE`.'
  path_rapm_fit_d:
    default: 'data/rapm_fit_d.rds'
    help: 'Analogous to `path_rapm_fit_o`.'
    
  skip_finalize:
    default: false
    help: 'If `TRUE`, then skips final steps of extracting RAPM estimates from 
    fitted models. (More specifically, assumes that
    `path_rapm_estimates_*` files exist, and combines these two data sets (`rapm_estimates_*`)
    to create `rapm_estimates`.)'
  path_rapm_estimates_o:
    default: 'data/rapm_estimates_o.csv'
    help: 'Path format of final the player-specific offensive RAPM estimates.
    Only relevent if `export = `TRUE`.'
  path_rapm_estimates_d:
    default: 'data/rapm_estimates_d.csv'
    help: 'Analogous to `path_rapm_estimates_o`.'
  path_rapm_estimates:
    default: 'data/rapm_estimates.csv'
    help: 'Path format of final combined offensive and defensive RAPM estimates.'

production:

# ```r
# config <- config::get()
# ```
